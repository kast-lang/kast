syntax from_scratch;
syntax "core:module" 0 wrap always = "module" ":" "\n" _ ->;
syntax "core:then" 0 wrap always = _ ";" "\n" _ ->;
syntax "core:stmt" 0 wrap always = _ ";";
syntax "core:use .*" 1 wrap never = "use" " " _ ".*";
syntax "core:impl syntax" 1 wrap never = "impl" " " "syntax" " " name " " "=" " " impl;
syntax "core:assign" 2 wrap never = assignee " " "=" " " value;
syntax "core:const" 2 wrap never = "const" " " pattern " " "=" " " value;
syntax "core:let" 3 wrap never = "let" " " pattern;
syntax "core:if" 4 wrap never = "if" " " cond " " "then" " " then_case " " "else" " " else_case ->;
syntax "core:comma" 5 wrap if_any = <- _ "," " "/"\n" _;
syntax "core:trailing comma" 5 wrap never = <- _ ",";
syntax "core:field init" 6 wrap never = "." label type=(" " "::" " " _)? value=(" " "=" " " _)?;
syntax "core:fn" 7 wrap never = arg " " context=("with" " " _ " ")? result=("->" " " _ " ")? "=>" " " body;
syntax "core:type ascribe" 8 wrap never = expr " " "::" " " type;
syntax "core:fn_type" 8.5 wrap never = arg " " context=("with" " " _ " ")? "->" " " result;
syntax "core:import" 9 wrap never = "import" " " path;
syntax "core:include" 9 wrap never = "include" " " path;
syntax "core:comptime" 9 wrap never = "comptime" " " _;
syntax "core:native" 9 wrap never = "native" " " _;
syntax "core:or" 10 wrap never = _ " " "or" " " _;
syntax "core:and" 11 wrap never = _ " " "and" " " _;
syntax "core:add" 15 wrap if_any = <- _ " "/"\n" "+" " " _;
syntax "core:sub" 15 wrap if_any = <- _ " "/"\n" "-" " " _;
syntax "core:mul" 17 wrap if_any = <- _ " "/"\n" "*" " " _;
syntax "core:div" 17 wrap if_any = <- _ " "/"\n" "/" " " _;
syntax "|>" 20 wrap if_any = <- arg " "/"\n\t" "|>" " " f ""/"\\";
syntax "core:apply" 50 wrap never = <- f " " arg;
syntax "core:." 70 wrap if_any = <- obj ""/"\n\t" "." field ""/"\\";
syntax "core:type expr" 1000 wrap never = "type" " " _ ->;
syntax "core:type" 1000 wrap never = "type";
syntax "core:true" 1000 wrap never = "true";
syntax "core:false" 1000 wrap never = "false";
syntax "core:unit" 1000 wrap never = "(" ")";
syntax "core:scope" 1000 wrap if_any = "(" ""/"\n\t" _:any ""/"\\\n" ")";
syntax "core:placeholder" 1000 wrap never = "_";
syntax "core:quote" 1000 wrap if_any = "`" "(" ""/"\n\t"  _:any ""/"\\\n" ")";
syntax "core:unquote" 1000 wrap never = "\\" _ ->;
